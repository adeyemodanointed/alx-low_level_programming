!<arch>
0-isupper.c/    0           0     0     644     232       `
#include "main.h"
/**
 * _isupper - checks for uppercase characters
 *
 * @c: param for the _isupper function
 *
 * Return: 1 if lower and 0 if not
 */
int _isupper(int c)
{
if (c < 'A' || c > 'Z')
	return (0);

else
	return (1);
}
0-memset.c/     0           0     0     644     294       `
#include "main.h"
/**
 * _memset - fills memory with a constant byte,
 * @s: memory area.
 * @b: constant byte.
 * @n: bytes filled.
 * Return: the pointer to dest.
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		*(s + i) =  b;

	return (s);
}
0-strcat.c/     0           0     0     644     389       `
#include "main.h"

/**
 * _strcat - concatenates to strings.
 * @dest: new pointer
 * @src: initial pointer
 * Return: char *.
 */
char *_strcat(char *dest, char *src)
{
	int n = 0;
	int y = 0;
	int count = 0;

	while (dest[n] != '\0')
	{
		n++;
	}
	while (src[y] != '\0')
		y++;

	while (count < y)
	{
		dest[n + count] = src[count];
		count++;
	}
	dest[n + y] = '\0';

	return (dest);
}

100-atoi.c/     0           0     0     644     275       `
#include "main.h"
#include <stdio.h>

/**
 * _atoi - convert sting to an integer.
 * @s: pointer to string
 * Return: return number.
 */
int _atoi(char *s)
{
	int count = 0;

	while (s[count] != '\0')
	{
		printf("%d", s[count]);
		count++;
	}
	printf("\n");

	return (0);
}

1-isdigit.c/    0           0     0     644     233       `
#include "main.h"
/**
 * _isdigit - checks for numerical characters
 *
 * @c: param for the _isdigita function
 *
 * Return: 1 if digit and 0 if not
 */
int _isdigit(int c)
{

if (c >= 48 && c < 58)
	return (1);

else
	return (0);
}

1-memcpy.c/     0           0     0     644     322       `
#include "main.h"
/**
 * _memcpy - copies memory area,
 * @dest: destination memory area.
 * @src: source memory area.
 * @n: bytes filled.
 * Return: the pointer to dest.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		*(dest + i) =  *(src + i);

	return (dest);
}
1-strncat.c/    0           0     0     644     532       `
#include "main.h"

/**
 * _strncat - concatenates two strings with a specific byte.
 * @dest: new pointer
 * @src: initial pointer
 * @n: number of bytes to concatenate
 * Return: char *.
 */
char *_strncat(char *dest, char *src, int n)
{
	int a = 0;
	int y = 0;
	int count = 0;
	int check;

	while (dest[a] != '\0')
	{
		a++;
	}
	while (src[y] != '\0')
		y++;

	if (n > y)
		check = y;
	else
		check = n;
	while (count < check)
	{
		dest[a + count] = src[count];
		count++;
	}

	if (n < y)
		dest[a + n] = '\0';

	return (dest);
}
2-strchr.c/     0           0     0     644     354       `
#include "main.h"
/**
 * _strchr - locates a character in a string,
 * @s: string.
 * @c: character.
 * Return: the pointer to the first occurrence of the character c.
 */
char *_strchr(char *s, char c)
{
	unsigned int i = 0;

	for (; *(s + i) != '\0'; i++)
		if (*(s + i) == c)
			return (s + i);
	if (*(s + i) == c)
		return (s + i);
	return ('\0');
}
2-strlen.c/     0           0     0     644     229       `
#include "main.h"

/**
 * _strlen - Gets the length of a string
 *
 * @s: pointer to a string
 *
 * Return: Always length of string.
 */

int _strlen(char *s)
{
	int n = 0;

	while (*(s + n) != '\0')
	{
		n++;
	}

	return (n);
}

2-strncpy.c/    0           0     0     644     530       `
#include "main.h"

/**
 * _strncpy - prints n elements of an array, followed by a new line.
 * @dest: new pointer
 * @src: initial pointer
 * @n: character count
 * Return: char *.
 */
char *_strncpy(char *dest, char *src, int n)
{
int i = 0, dCount = 0, sCount = 0;

while (dest[dCount] != '\0')
dCount++;
while (src[sCount] != '\0')
sCount++;
if (n < sCount)
{
while (i < n)
{
dest[i] = src[i];
i++;
}
}
else
{
while (i < sCount)
{
dest[i] = src[i];
i++;
}
while (i < n)
{
dest[i] = '\0';
i++;
}
dest = src;
}

return (dest);
}
3-islower.c/    0           0     0     644     232       `
#include "main.h"
/**
 * _islower - checks for lowercase characters
 *
 * @c: param for the _islower function
 *
 * Return: 1 if lower and 0 if not
 */
int _islower(int c)
{
if (c < 'a' || c > 'z')
	return (0);

else
	return (1);
}
3-puts.c/       0           0     0     644     316       `
#include "main.h"

/**
 * puts_half - prints half of a string, followed by a new line.
 * @str: input string.
 * Return: no return.
 */
void _puts(char *str)
{
	int count = 0;
	int n = 0;

	while (count >= 0)
	{
		if (str[count] == '\0')
		{
			_putchar('\n');
			break;
		}
		_putchar(str[count]);
		count++;
	}

}
3-strcmp.c/     0           0     0     644     304       `
#include "main.h"

/**
 * _strcmp - compares two strings.
 * @s1: first string
 * @s2: second string
 * Return: int value
 */
int _strcmp(char *s1, char *s2)
{
int i = 0, op = 0;

while (op == 0)
{
if ((*(s1 + i) == '\0') && (*(s2 + i) == '\0'))
break;
op = *(s1 + i) - *(s2 + i);
i++;
}

return (op);
}
3-strspn.c/     0           0     0     644     460       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring.
 * @s: initial segment.
 * @accept: accepted bytes.
 * Return: the number of accepted bytes.
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j, bool;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		bool = 1;
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
			{
				bool = 0;
				break;
			}
		}
		if (bool == 1)
			break;
	}
	return (i);
}
4-isalpha.c/    0           0     0     644     259       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic characters
 *
 * @c: param for the _isalpha function
 *
 * Return: 1 if lower and 0 if not
 */
int _isalpha(int c)
{

if ((c >= 65 && c < 91) || (c > 96 && c <= 122))
	return (1);

else
	return (0);
}

4-strpbrk.c/    0           0     0     644     475       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: first string.
 * @accept: second string.
 * Return: a pointer to the byte in s that matches one of the
 * bytes in accept, or NULL if no such byte is found.
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
				return (s + i);
		}
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     621       `
#include "main.h"

/**
 * _strstr - finds the first occurrence of the substring.
 * needle in the string haystack.
 * @haystack: entire string.
 * @needle: substring.
 * Return: pointer to the beginning of located substring or
 * NULL if the substring is not found.
*/
char *_strstr(char *haystack, char *needle)
{
	char *bhaystack;
	char *pneedle;

	while (*haystack != '\0')
	{
		bhaystack = haystack;
		pneedle = needle;

		while (*haystack != '\0' && *pneedle != '\0' && *haystack == *pneedle)
		{
			haystack++;
			pneedle++;
		}
		if (!*pneedle)
			return (bhaystack);
		haystack = bhaystack + 1;
	}
	return (0);
}

6-abs.c/        0           0     0     644     188       `
#include "main.h"
/**
 * _abs - print absolute value
 *
 * @n: single integer
 *
 * Return: absolute value
 */
int _abs(int n)
{

if (n >= 0)
{
return (n);
}
else
{
return (n * (-1));
}
}
9-strcpy.c/     0           0     0     644     306       `
#include "main.h"

/**
 * _strcpy - prints n elements of an array, followed by a new line.
 * @dest: new pointer
 * @src: initial pointer
 * Return: char *.
 */
char *_strcpy(char *dest, char *src)
{
	int n = 0;

	while (src[n] != '\0')
	{
		dest[n] = src[n];
		n++;
	}
	dest[n] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

